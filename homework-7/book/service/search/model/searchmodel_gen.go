// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	searchFieldNames          = builder.RawFieldNames(&Search{})
	searchRows                = strings.Join(searchFieldNames, ",")
	searchRowsExpectAutoSet   = strings.Join(stringx.Remove(searchFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	searchRowsWithPlaceHolder = strings.Join(stringx.Remove(searchFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSearchIdPrefix = "cache:search:id:"
)

type (
	searchModel interface {
		Insert(ctx context.Context, data *Search) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Search, error)
		Update(ctx context.Context, data *Search) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSearchModel struct {
		sqlc.CachedConn
		table string
	}

	Search struct {
		Id   int64  `db:"id"`
		Name string `db:"name"` // 书籍名字
	}
)

func newSearchModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSearchModel {
	return &defaultSearchModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`search`",
	}
}

func (m *defaultSearchModel) Delete(ctx context.Context, id int64) error {
	searchIdKey := fmt.Sprintf("%s%v", cacheSearchIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, searchIdKey)
	return err
}

func (m *defaultSearchModel) FindOne(ctx context.Context, id int64) (*Search, error) {
	searchIdKey := fmt.Sprintf("%s%v", cacheSearchIdPrefix, id)
	var resp Search
	err := m.QueryRowCtx(ctx, &resp, searchIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", searchRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSearchModel) Insert(ctx context.Context, data *Search) (sql.Result, error) {
	searchIdKey := fmt.Sprintf("%s%v", cacheSearchIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, searchRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name)
	}, searchIdKey)
	return ret, err
}

func (m *defaultSearchModel) Update(ctx context.Context, data *Search) error {
	searchIdKey := fmt.Sprintf("%s%v", cacheSearchIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, searchRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Id)
	}, searchIdKey)
	return err
}

func (m *defaultSearchModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSearchIdPrefix, primary)
}

func (m *defaultSearchModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", searchRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSearchModel) tableName() string {
	return m.table
}
